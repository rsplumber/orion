// <auto-generated />
using System;
using Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.EF.Migrations
{
    [DbContext(typeof(OrionDbContext))]
    [Migration("20231212075734_jsonb_changed_normal")]
    partial class jsonb_changed_normal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Files.Bucket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("buckets", (string)null);
                });

            modelBuilder.Entity("Core.Files.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_utc");

                    b.Property<string>("Locations")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("locations");

                    b.Property<string>("Metas")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metas");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<Guid>("bucket_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("bucket_id");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("Core.Providers.Provider", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_utc");

                    b.Property<string>("Metas")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("metas");

                    b.Property<bool>("Primary")
                        .HasColumnType("boolean")
                        .HasColumnName("primary");

                    b.Property<bool>("Replication")
                        .HasColumnType("boolean")
                        .HasColumnName("replication");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Name");

                    b.ToTable("providers", (string)null);
                });

            modelBuilder.Entity("Core.Providers.Replication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedDateUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_date_utc");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("Provider")
                        .IsUnique();

                    b.ToTable("replications", (string)null);
                });

            modelBuilder.Entity("Core.Files.File", b =>
                {
                    b.HasOne("Core.Files.Bucket", "Bucket")
                        .WithMany("Files")
                        .HasForeignKey("bucket_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bucket");
                });

            modelBuilder.Entity("Core.Files.Bucket", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
